# dependency chart values
grafana:
  enabled: false
  external:
    url: "http://localhost:4000" # Set to AMG Endpoint in setup-environments

mysql:
  storage:
    class: gp3

  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999

  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault

  initContainers:
  - name: create-grafana-user
    image: mysql:8
    command: 
      - /bin/bash
      - -c
      - |
        until mysql -h devlake-mysql -P 3306 -u root -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done
      
        echo "Creating Grafana user..."
        mysql -h devlake-mysql -P 3306 -u root -p${MYSQL_ROOT_PASSWORD} -e "
        CREATE USER IF NOT EXISTS 'grafanaReader' IDENTIFIED BY 'grafana_password';
        GRANT SELECT ON lake.* TO 'grafanaReader';
        FLUSH PRIVILEGES;
        "

        echo "User creation completed."
    envFrom:
      - secretRef:
          name: devlake-mysql-auth

lake:
  image:
    repository: public.ecr.aws/o3w6s6n3/devlake/lake
    pullPolicy: Always
    tag: latest
  # storage for config
  encryptionSecret:
    # The name of secret which contains keys named ENCRYPTION_SECRET
    secretName: devlake-encryption-secret
    autoCreateSecret: false

  securityContext:
    runAsNonRoot: true
    runAsUser: 1010    
    runAsGroup: 1010   
    fsGroup: 1010      

  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault


alpine:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000

  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault

ui:
  image:
    repository: public.ecr.aws/o3w6s6n3/devlake/ui
    pullPolicy: Always
    tag: latest

  securityContext:
    runAsNonRoot: true

  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault


  # Look into adding an auth proxy like done: https://github.com/oauth2-proxy/oauth2-proxy/blob/master/contrib/local-environment/docker-compose-keycloak.yaml
  basicAuth:
    enabled: true
    user: admin
    password: devlake-admin
    autoCreateSecret: true
    secretName: "devlake-admin-secret"

service:
  # service type: NodePort/ClusterIP
  type: ClusterIP

ingress:
  enabled: false
