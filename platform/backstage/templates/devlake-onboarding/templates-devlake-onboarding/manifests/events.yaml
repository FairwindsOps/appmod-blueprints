apiVersion: v1
kind: Service
metadata:
  name: webhook-eventsource-svc
spec:
  type: NodePort  # Or ClusterIP if using Ingress
  ports:
    - port: 12000
      targetPort: 12000
      protocol: TCP
  selector:
    eventsource-name: gitea-webhook

---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
spec:
  nats:
    native:
      replicas: 3
      auth: token
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: gitea-webhook
  labels:
    eventsource-name: gitea-webhook
spec:
  service:
    ports:
      - port: 12000
        targetPort: 12000
  webhook:
    incidents-webhook:
      port: "12000"
      endpoint: /webhook/incidents
      method: POST
    deployments-webhook:
      port: "12000"
      endpoint: /webhook/deployments
      method: POST

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: gitea-webhook-sensor
spec:
  template:
    serviceAccountName: wf-sa
  dependencies:
    - name: incidents-webhook
      eventSourceName: gitea-webhook
      eventName: incidents-webhook
    - name: deployments-webhook
      eventSourceName: gitea-webhook
      eventName: deployments-webhook
  triggers:
    - template:
        name: incidents-workflow-trigger
        conditions: "incidents-webhook"
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: incidents-workflow-
              spec:
                entrypoint: process-incident
                serviceAccountName: wf-sa
                arguments:
                  parameters:
                    - name: body
                      value: '{{.Input.body}}'
                    - name: headers
                      value: '{{.Input.headers}}'
                    - name: url
                      value: http://devlake-ui.devlake.svc.cluster.local:4000/api/rest/plugins/webhook/connections/1/issues
                    - name: token
                      value: ubr09ow9z27sfRldMCX3c7o1hxp3B4VvMUok2BJWV2rHhhtsXIfCQwhTaaUjbzlLEU8arHVMzMQ8bVjcnHWgQZ7Z2DEXHkUqfNjO0pxX6759rR26ee1ucflFEn0SshS4
                templates:
                  - name: process-incident
                    inputs:
                      parameters:
                        - name: body
                        - name: headers
                        - name: url
                        - name: token
                    script:
                      image: alpine
                      command: [sh]
                      source: |
                        apk add --no-cache jq curl
                        echo '{{inputs.parameters.body}}'
                        PAYLOAD=$(echo '{{inputs.parameters.body}}' | jq '
                        {
                          issueKey: (.repository.full_name + "-" + (.issue.number | tostring)),
                          title: .issue.title,
                          description: .issue.body,
                          url: .issue.html_url,
                          type: "INCIDENT",
                          status: (if .issue.state == "open" then "TODO" else "DONE" end),
                          originalStatus: "TODO",
                          createdDate: .issue.created_at,
                          updatedDate: .issue.updated_at,
                          resolutionDate: (if .issue.state == "closed" then .issue.closed_at else null end),
                          priority: "",
                          severity: "",
                          creatorId: .issue.user.login,
                          creatorName: (.issue.user.full_name // .issue.user.login),
                          assigneeId: (.issue.assignee.login // ""),
                          assigneeName: (if .issue.assignee then (.issue.assignee.full_name // .issue.assignee.login) else "" end)
                        }')
                        echo "====Transformed Payload===="
                        echo "$PAYLOAD" | jq '.'
                        TOKEN='{{inputs.parameters.token}}'

                        curl -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$PAYLOAD" '{{inputs.parameters.url}}'
          parameters:
            - src:
                dependencyName: incidents-webhook
                dataKey: body
              dest: spec.arguments.parameters.0.value
    
    - template:
        name: deployments-workflow-trigger
        conditions: "deployments-webhook"
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: deployments-workflow-
              spec:
                entrypoint: process-deployment
                serviceAccountName: wf-sa
                arguments:
                  parameters:
                    - name: body
                      value: '{{.Input.body}}'
                    - name: headers
                      value: '{{.Input.headers}}'
                    - name: url
                      value: http://devlake-ui.devlake.svc.cluster.local:4000/api/rest/plugins/webhook/connections/1/deployments
                    - name: token
                      value: ubr09ow9z27sfRldMCX3c7o1hxp3B4VvMUok2BJWV2rHhhtsXIfCQwhTaaUjbzlLEU8arHVMzMQ8bVjcnHWgQZ7Z2DEXHkUqfNjO0pxX6759rR26ee1ucflFEn0SshS4
                templates:
                  - name: process-deployment
                    inputs:
                      parameters:
                        - name: body
                        - name: headers
                        - name: url
                        - name: token
                    script:
                      image: alpine
                      command: [sh]
                      source: |
                        apk add --no-cache jq curl
                        PAYLOAD=$(echo '{{inputs.parameters.body}}' | jq '
                        . as $root |
                        {
                          id: .after,
                          createdDate: (.commits | first | .timestamp),
                          startedDate: (.commits | first | .timestamp),
                          finishedDate: (.commits | last | .timestamp),
                          environment: "PRODUCTION",
                          result: "SUCCESS",
                          name: ("deployment-" + (.after | .[0:7])),
                          deploymentCommits: [
                            .commits[] | {
                              repoUrl: $root.repository.clone_url,
                              refName: $root.ref,
                              startedDate: .timestamp,
                              finishedDate: .timestamp,
                              commitSha: .id,
                              commitMsg: .message,
                              result: "SUCCESS",
                              name: ("deployment-" + (.id | .[0:7]))
                            }
                          ]
                        }')
                        echo "====Transformed Payload===="
                        echo "$PAYLOAD" | jq '.'
                        TOKEN='{{inputs.parameters.token}}'

                        curl -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$PAYLOAD" '{{inputs.parameters.url}}'
          parameters:
            - src:
                dependencyName: deployments-webhook
                dataKey: body
              dest: spec.arguments.parameters.0.value

