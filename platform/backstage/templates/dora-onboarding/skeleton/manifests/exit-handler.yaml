apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ${{values.appname}}-cicd-deployments-dora-processing-template
  namespace: ${{values.namespace}}
spec:
  entrypoint: handle-rollout-check-and-process-deploy
  serviceAccountName: ${{values.appname}}-dora-webhook-sa
  volumes:
    - name: argocd-cluster-secret
      secret:
        secretName: dev-cluster-argo-secret
        namespace: argocd
  arguments:
    parameters:
      - name: body
      - name: headers
      - name: url
        value: devlake-ui.devlake.svc.cluster.local:4000
      - name: appname
        value: ${{values.appName}}
      - name: namespace
        value: ${{values.appNamespace}}
  templates:
    - name: handle-rollout-check-and-process-deploy
      steps:
        - - name: check-rollout
            template: check-rollout-status
        - - name: process-and-send-deployment
            template: process-deployment
            arguments:
              parameters:
                - name: status
                  value: "{{steps.check-rollout.outputs.result}}"
                - name: body
                  value: "{{workflow.parameters.body}}"
                - name: url
                  value: "{{workflow.parameters.url}}"
                - name: headers
                  value: "{{workflow.parameters.headers}}"


    - name: process-deployment
      inputs:
        parameters:
          - name: body
          - name: headers
          - name: url
          - name: status
      script:
        image: alpine
        command: [sh]
        envFrom:
          - secretRef:
              name: devlake-webhook-secret
          - configMapRef:
              name: devlake-webhook-id
        source: |
          apk add --no-cache jq curl
          RESULT="{{inputs.parameters.status}}
          webhook_url="{{inputs.parameters.url}}"/api/rest/plugins/webhook/connections/${DEVLAKE_HOOK_ID}/deployments          
          PAYLOAD=$(echo '{{inputs.parameters.body}}' | jq --arg result "$RESULT" '
          . as $root |
          {
            id: .after,
            createdDate: (.commits | first | .timestamp),
            startedDate: (.commits | first | .timestamp),
            finishedDate: (.commits | last | .timestamp),
            environment: "PRODUCTION",
            result: $result,
            name: ("deployment-" + (.after | .[0:7])),
            deploymentCommits: [
              .commits[] | {
                repoUrl: $root.repository.clone_url,
                refName: $root.ref,
                startedDate: .timestamp,
                finishedDate: .timestamp,
                commitSha: .id,
                commitMsg: .message,
                result: "SUCCESS",
                name: ("deployment-" + (.id | .[0:7]))
              }
            ]
          }')
          echo "====Transformed Payload===="
          echo "$PAYLOAD" | jq '.'

          curl -X POST -H "Authorization: Bearer $DEVLAKE_TOKEN" -H "Content-Type: application/json" -d "$PAYLOAD" $webhook_url

    - name: check-rollout-status
      script:
        image: bitnami/kubectl:latest
        command: [bash]
        volumeMounts:
          - name: argocd-cluster-secret
            mountPath: /tmp/argocd-cluster
            readOnly: true
        source: |
          mkdir -p ~/.kube
          cp /tmp/argocd-cluster/config ~/.kube/config

          # Install kubectl-argo-rollouts plugin
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

          SEARCH_WORD="{{workflow.parameters.appname}}"
          ROLLOUT_NAME=$(kubectl get rollout -n {{workflow.parameters.namespace}} -o json | \
            jq -r --arg WORD "$SEARCH_WORD" '.items[] | select(.metadata.name | contains($WORD)) | .metadata.name')

          if [ -z "$ROLLOUT_NAME" ]; then
            echo "No rollout found containing word: $SEARCH_WORD"
            exit 1
          fi
          # Initialize timeout variables
          TIMEOUT=600  # 10 minutes timeout
          INTERVAL=10  # Check every 10 seconds
          ELAPSED=0

          if kubectl argo rollouts status $ROLLOUT_NAME -n "{{workflow.parameters.namespace}}" --timeout 2m; then
            echo "SUCCESS"
            exit 0
          else 
            echo "FAILURE"
            exit 0
          fi
