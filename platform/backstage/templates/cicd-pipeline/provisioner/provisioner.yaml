---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: cicd-provisioner-${{values.appname}}
  namespace: ${{values.namespace}}
spec:
  entrypoint: cicd-provisioner
  nodeSelector:
    topology.kubernetes.io/zone: ${{values.aws_region}}a
  serviceAccountName: ${{values.appname}}-cicd-provisioner
  arguments:
    parameters:
    - name: appname
      value: ${{values.appname}}
    - name: namespace
      value: ${{values.namespace}}
    - name: aws_region
      value: ${{values.aws_region}}
    - name: gitea_token
      value: ${{values.gitea_token}}
    - name: hostname
      value: ${{values.hostname}}

  templates:
  - name: cicd-provisioner
    dag:
      tasks:
        - name: get-ecr-secret
          template: get-ecr-secret

        - name: create-docker-registry-secret
          template: create-docker-registry-secret
          arguments:
            parameters:
            - name: ecr_secret
              value: "{{tasks.get-ecr-secret.outputs.result}}"
          depends: "get-ecr-secret"
        
        - name: create-gitea-token-secret
          template: create-gitea-token-secret
          arguments:
            parameters:
            - name: token
              value: "{{workflow.parameters.gitea_token}}"

        - name: create-ecr-repository
          template: create-ecr-repository

        - name: create-ecr-configmap
          template: create-ecr-configmap
          arguments:
            parameters:
            - name: image
              value: "{{tasks.create-ecr-repository.outputs.result}}"
          depends: "create-ecr-repository"

        - name: create-gitea-webhook
          template: create-gitea-webhook
          depends: "create-gitea-token-secret"


  - name: get-ecr-secret
    container:
      image: amazon/aws-cli:latest
      command: ["/bin/bash", "-c"]
      args: 
      - |
        aws ecr get-login-password --region "{{workflow.parameters.aws_region}}"

  - name: create-docker-registry-secret
    inputs:
      parameters:
      - name: ecr_secret
    container:
      image: bitnami/kubectl:latest
      command: ["/bin/bash", "-c"]
      args:
      - |
        kubectl delete secret "{{workflow.parameters.aws_region}}"-regcred --ignore-not-found
        kubectl create secret docker-registry "{{workflow.parameters.aws_region}}"-regcred -n "{{workflow.parameters.namespace}}" \
          --docker-server="{{workflow.parameters.aws_region}}".amazonaws.com \
          --docker-username=AWS \
          --docker-password="{{inputs.parameters.ecr_secret}}"

  - name: create-gitea-token-secret
    inputs:
      parameters:
      - name: token
    container:
      image: bitnami/kubectl:latest
      command: ["/bin/bash", "-c"]
      args:
      - |
        kubectl delete secret "{{workflow.parameters.appname}}"-gitea-token --ignore-not-found
        kubectl create secret generic "{{workflow.parameters.appname}}"-gitea-token -n "{{workflow.parameters.namespace}}" --from-literal=token="{{inputs.parameters.token}}"

  - name: create-ecr-repository
    container:
      image: amazon/aws-cli:latest
      command: ["/bin/bash", "-c"]
      args:
      - |
        output=$(aws ecr describe-repositories --repository-names "modengg/{{workflow.parameters.appname}}" --region "{{workflow.parameters.aws_region}}" 2>&1)
        status=$?
        if [[ ! "${status}" -eq 0 ]]; then
            output=$(aws ecr create-repository --repository-name "modengg/{{workflow.parameters.appname}}" --region "{{workflow.parameters.aws_region}}" 2>&1)
        fi
        aws ecr describe-repositories --repository-names "modengg/{{workflow.parameters.appname}}" --region "{{workflow.parameters.aws_region}}" --query "repositories[0].repositoryUri" --output text

  - name: create-ecr-configmap
    inputs:
      parameters:
      - name: image 
    container:
      image: bitnami/kubectl:latest
      command: ["/bin/bash", "-c"]
      args:
      - |
        kubectl delete configmap "{{workflow.parameters.appname}}"-ecr-repo --ignore-not-found
        kubectl create configmap "{{workflow.parameters.appname}}"-ecr-repo -n "{{workflow.parameters.namespace}}" --from-literal=image="{{inputs.parameters.image}}"

  - name: create-gitea-webhook
    container:
      image: alpine:3.20
      command: ["/bin/sh", "-c"]
      envFrom:
      - secretRef:
          name: "{{workflow.parameters.appname}}-gitea-token"
      args:
      - |
        apk add curl jq
        hooks_api_url="{{workflow.parameters.hostname}}"/gitea/api/v1/repos/giteaAdmin/"{{workflow.parameters.appname}}"/hooks
        webhook_url="http://{{workflow.parameters.hostname}}"/argo-events/"{{workflow.parameters.appname}}"
        webhook_details=$(curl -k -X 'GET' "${hooks_api_url}" -H "accept: application/json" -H "Authorization: token ${token}" -H "Content-Type: application/json" | jq '.[].config.url')
        if [ -z "$webhook_details" ]; then
          echo "Webhook is not found, creating webhook with $webhook_url"
          curl -k -X 'POST' "${hooks_api_url}" -H "accept: application/json" -H "Authorization: token ${token}" -H "Content-Type: application/json" -d '{"branch_filter": "main","type": "gitea", "events":["push"], "config": {"url": "'${webhook_url}'", "content_type": "json"}, "active": true}'
        else
          echo "Webhook is already exists"
        fi
