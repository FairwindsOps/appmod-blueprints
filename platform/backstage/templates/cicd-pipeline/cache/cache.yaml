#---
#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: ${{values.appname}}-cache-vol
#  namespace: ${{values.namespace}}
#spec:
#  accessModes: [ "ReadWriteOnce" ]
#  storageClassName: gp2
#  resources:
#    requests:
#      storage: 2Gi
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: cicd-warmup-${{values.appname}}
  namespace: ${{values.namespace}}
spec:
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp2
      resources:
        requests:
          storage: 256Mi
  #volumes:
  #- name: cache
  #  persistentVolumeClaim:
  #    claimName: ${{values.appname}}-cache-vol
  entrypoint: cicd-warmup
  serviceAccountName: ${{values.appname}}-cicd-provisioner
  arguments:
    parameters:
    - name: appname
      value: ${{values.appname}}
    - name: apprepo
      value: ${{values.hostname}}/gitea/giteaAdmin/${{values.appname}}
    - name: aws_region
      value: ${{values.aws_region}}
    - name: dockerfile_path
      value: ${{values.dockerfile_path}}


  templates:
  - name: cicd-warmup
    dag:
      tasks:
        - name: clean
          template: cleandir

        - name: clone
          template: clonerepo
          arguments:
            parameters:
              - name: apprepo
                value: "{{workflow.parameters.apprepo}}"
              - name: branch
                value: main
          depends: "clean"

        - name: warmup
          template: warmup-cache
          arguments:
            parameters:
              - name: dockerfile-path
                value: "{{workflow.parameters.dockerfile_path}}"
              - name: tag-version
                value: cache-init
          depends: "clone"

  - name: cleandir 
    container:
      volumeMounts:
        - mountPath: /workdir
          name: workdir
      image: alpine:3.20
      workingDir: /workdir
      args:
        - /bin/sh
        - -c
        - |
          set -ex
          if [ "$(ls -A /workdir)" ]; then
            echo "Directory /workdir is not empty. Removing contents..."
            rm -rf /workdir/*
          fi

  - name: clonerepo
    inputs:
      parameters:
      - name: apprepo
      - name: branch
    container:
      volumeMounts:
      - mountPath: /workdir
        name: workdir
      image: alpine/git:v2.45.1
      workingDir: /workdir
      args:
        - clone
        - --depth
        - "1"
        - --branch
        - "{{inputs.parameters.branch}}"
        - --single-branch
        - "https://{{inputs.parameters.apprepo}}"
        - -c
        - http.sslVerify=false
        - .

  - name: build-image-for-cache
    inputs:
      parameters:
        - name: tag-version
        - name: dockerfile-path
    volumes:
      - name: docker-config
        secret:
          secretName: "{{workflow.parameters.aws_region}}-regcred"
    container:
      image: gcr.io/kaniko-project/executor:debug
      volumeMounts:
        - name: workdir
          mountPath: /workdir
        - name: docker-config
          mountPath: /kaniko/.docker
        # - name: cache
        #    mountPath: /cache
      workingDir: /workdir
      resources:
        limits:
          cpu: 2
          memory: 5Gi
      env:
        - name: DOCKER_CONFIG
          value: /kaniko/.docker
        - name: ECR_REPO
          valueFrom:
            configMapKeyRef:
              name: "{{workflow.parameters.appname}}-ecr-repo"
              key: image
      command: [
                "/busybox/sh",
                "-c",
                "/kaniko/executor \
                --dockerfile=Dockerfile \
                --context={{inputs.parameters.dockerfile-path}} \
                --destination=${ECR_REPO}:{{inputs.parameters.tag-version}} \
                --cache=true \
                --skip-tls-verify"
                ]

