# Dockerfile for creating a statically-linked Rust application using docker's
# multi-stage build feature. This also leverages the docker build cache to avoid
# re-downloading dependencies if they have not changed.
FROM rust AS build
WORKDIR /usr/app

RUN rustup target add aarch64-unknown-linux-musl
RUN apt update && apt install -y musl-tools musl-dev gcc-aarch64-linux-gnu build-essential clang llvm

# Download the target for static linking.
RUN rustup target add aarch64-unknown-linux-musl

COPY Cargo.toml Cargo.lock ./
COPY src/api/ ./src/api/

# Required for Rocket
RUN update-ca-certificates

RUN cargo build --bin api --target aarch64-unknown-linux-musl --release && exit 0

# Copy the statically-linked binary into a scratch container.
FROM scratch

COPY --from=build /usr/app/target/aarch64-unknown-linux-musl/release/api .

# steal the CA certs from our builder in production
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

USER 1000

ENV ROCKET_ADDRESS=0.0.0.0
ENV ROCKET_PORT=8080

CMD ["./api"]